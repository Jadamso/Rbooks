{
  "hash": "43275b26750f34db37cc28509d89fc62",
  "result": {
    "engine": "knitr",
    "markdown": "# Observational Data\n***\n\n## Temporal Interdependence\n\nMany observational datasets have temporal dependence, meaning that values at one point in time are related to past values. This violates the standard assumption of independence used in many statistical methods.\n\nStock prices are classic examples of temporally dependent processes. If Appleâ€™s stock was high yesterday, it is more likely (but not guaranteed) to be high today.\n\n::: {.cell}\n\n```{.r .cell-code}\n# highest price each day\nlibrary(plotly)\nstock <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv')\nfig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%\n  add_trace(x = ~Date, y = ~AAPL.High) %>%\n  layout(showlegend = F)\nfig\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-265ca67e06d6a405103a\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-265ca67e06d6a405103a\">{\"x\":{\"visdat\":{\"60415839cb6b\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"60415839cb6b\",\"attrs\":{\"60415839cb6b\":{\"mode\":\"lines\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\"},\"60415839cb6b.1\":{\"mode\":\"lines\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"x\":{},\"y\":{},\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"showlegend\":false,\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Date\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"AAPL.High\"},\"hovermode\":\"closest\"},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"mode\":\"lines\",\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines\",\"type\":\"scatter\",\"x\":[\"2015-02-17\",\"2015-02-18\",\"2015-02-19\",\"2015-02-20\",\"2015-02-23\",\"2015-02-24\",\"2015-02-25\",\"2015-02-26\",\"2015-02-27\",\"2015-03-02\",\"2015-03-03\",\"2015-03-04\",\"2015-03-05\",\"2015-03-06\",\"2015-03-09\",\"2015-03-10\",\"2015-03-11\",\"2015-03-12\",\"2015-03-13\",\"2015-03-16\",\"2015-03-17\",\"2015-03-18\",\"2015-03-19\",\"2015-03-20\",\"2015-03-23\",\"2015-03-24\",\"2015-03-25\",\"2015-03-26\",\"2015-03-27\",\"2015-03-30\",\"2015-03-31\",\"2015-04-01\",\"2015-04-02\",\"2015-04-06\",\"2015-04-07\",\"2015-04-08\",\"2015-04-09\",\"2015-04-10\",\"2015-04-13\",\"2015-04-14\",\"2015-04-15\",\"2015-04-16\",\"2015-04-17\",\"2015-04-20\",\"2015-04-21\",\"2015-04-22\",\"2015-04-23\",\"2015-04-24\",\"2015-04-27\",\"2015-04-28\",\"2015-04-29\",\"2015-04-30\",\"2015-05-01\",\"2015-05-04\",\"2015-05-05\",\"2015-05-06\",\"2015-05-07\",\"2015-05-08\",\"2015-05-11\",\"2015-05-12\",\"2015-05-13\",\"2015-05-14\",\"2015-05-15\",\"2015-05-18\",\"2015-05-19\",\"2015-05-20\",\"2015-05-21\",\"2015-05-22\",\"2015-05-26\",\"2015-05-27\",\"2015-05-28\",\"2015-05-29\",\"2015-06-01\",\"2015-06-02\",\"2015-06-03\",\"2015-06-04\",\"2015-06-05\",\"2015-06-08\",\"2015-06-09\",\"2015-06-10\",\"2015-06-11\",\"2015-06-12\",\"2015-06-15\",\"2015-06-16\",\"2015-06-17\",\"2015-06-18\",\"2015-06-19\",\"2015-06-22\",\"2015-06-23\",\"2015-06-24\",\"2015-06-25\",\"2015-06-26\",\"2015-06-29\",\"2015-06-30\",\"2015-07-01\",\"2015-07-02\",\"2015-07-06\",\"2015-07-07\",\"2015-07-08\",\"2015-07-09\",\"2015-07-10\",\"2015-07-13\",\"2015-07-14\",\"2015-07-15\",\"2015-07-16\",\"2015-07-17\",\"2015-07-20\",\"2015-07-21\",\"2015-07-22\",\"2015-07-23\",\"2015-07-24\",\"2015-07-27\",\"2015-07-28\",\"2015-07-29\",\"2015-07-30\",\"2015-07-31\",\"2015-08-03\",\"2015-08-04\",\"2015-08-05\",\"2015-08-06\",\"2015-08-07\",\"2015-08-10\",\"2015-08-11\",\"2015-08-12\",\"2015-08-13\",\"2015-08-14\",\"2015-08-17\",\"2015-08-18\",\"2015-08-19\",\"2015-08-20\",\"2015-08-21\",\"2015-08-24\",\"2015-08-25\",\"2015-08-26\",\"2015-08-27\",\"2015-08-28\",\"2015-08-31\",\"2015-09-01\",\"2015-09-02\",\"2015-09-03\",\"2015-09-04\",\"2015-09-08\",\"2015-09-09\",\"2015-09-10\",\"2015-09-11\",\"2015-09-14\",\"2015-09-15\",\"2015-09-16\",\"2015-09-17\",\"2015-09-18\",\"2015-09-21\",\"2015-09-22\",\"2015-09-23\",\"2015-09-24\",\"2015-09-25\",\"2015-09-28\",\"2015-09-29\",\"2015-09-30\",\"2015-10-01\",\"2015-10-02\",\"2015-10-05\",\"2015-10-06\",\"2015-10-07\",\"2015-10-08\",\"2015-10-09\",\"2015-10-12\",\"2015-10-13\",\"2015-10-14\",\"2015-10-15\",\"2015-10-16\",\"2015-10-19\",\"2015-10-20\",\"2015-10-21\",\"2015-10-22\",\"2015-10-23\",\"2015-10-26\",\"2015-10-27\",\"2015-10-28\",\"2015-10-29\",\"2015-10-30\",\"2015-11-02\",\"2015-11-03\",\"2015-11-04\",\"2015-11-05\",\"2015-11-06\",\"2015-11-09\",\"2015-11-10\",\"2015-11-11\",\"2015-11-12\",\"2015-11-13\",\"2015-11-16\",\"2015-11-17\",\"2015-11-18\",\"2015-11-19\",\"2015-11-20\",\"2015-11-23\",\"2015-11-24\",\"2015-11-25\",\"2015-11-27\",\"2015-11-30\",\"2015-12-01\",\"2015-12-02\",\"2015-12-03\",\"2015-12-04\",\"2015-12-07\",\"2015-12-08\",\"2015-12-09\",\"2015-12-10\",\"2015-12-11\",\"2015-12-14\",\"2015-12-15\",\"2015-12-16\",\"2015-12-17\",\"2015-12-18\",\"2015-12-21\",\"2015-12-22\",\"2015-12-23\",\"2015-12-24\",\"2015-12-28\",\"2015-12-29\",\"2015-12-30\",\"2015-12-31\",\"2016-01-04\",\"2016-01-05\",\"2016-01-06\",\"2016-01-07\",\"2016-01-08\",\"2016-01-11\",\"2016-01-12\",\"2016-01-13\",\"2016-01-14\",\"2016-01-15\",\"2016-01-19\",\"2016-01-20\",\"2016-01-21\",\"2016-01-22\",\"2016-01-25\",\"2016-01-26\",\"2016-01-27\",\"2016-01-28\",\"2016-01-29\",\"2016-02-01\",\"2016-02-02\",\"2016-02-03\",\"2016-02-04\",\"2016-02-05\",\"2016-02-08\",\"2016-02-09\",\"2016-02-10\",\"2016-02-11\",\"2016-02-12\",\"2016-02-16\",\"2016-02-17\",\"2016-02-18\",\"2016-02-19\",\"2016-02-22\",\"2016-02-23\",\"2016-02-24\",\"2016-02-25\",\"2016-02-26\",\"2016-02-29\",\"2016-03-01\",\"2016-03-02\",\"2016-03-03\",\"2016-03-04\",\"2016-03-07\",\"2016-03-08\",\"2016-03-09\",\"2016-03-10\",\"2016-03-11\",\"2016-03-14\",\"2016-03-15\",\"2016-03-16\",\"2016-03-17\",\"2016-03-18\",\"2016-03-21\",\"2016-03-22\",\"2016-03-23\",\"2016-03-24\",\"2016-03-28\",\"2016-03-29\",\"2016-03-30\",\"2016-03-31\",\"2016-04-01\",\"2016-04-04\",\"2016-04-05\",\"2016-04-06\",\"2016-04-07\",\"2016-04-08\",\"2016-04-11\",\"2016-04-12\",\"2016-04-13\",\"2016-04-14\",\"2016-04-15\",\"2016-04-18\",\"2016-04-19\",\"2016-04-20\",\"2016-04-21\",\"2016-04-22\",\"2016-04-25\",\"2016-04-26\",\"2016-04-27\",\"2016-04-28\",\"2016-04-29\",\"2016-05-02\",\"2016-05-03\",\"2016-05-04\",\"2016-05-05\",\"2016-05-06\",\"2016-05-09\",\"2016-05-10\",\"2016-05-11\",\"2016-05-12\",\"2016-05-13\",\"2016-05-16\",\"2016-05-17\",\"2016-05-18\",\"2016-05-19\",\"2016-05-20\",\"2016-05-23\",\"2016-05-24\",\"2016-05-25\",\"2016-05-26\",\"2016-05-27\",\"2016-05-31\",\"2016-06-01\",\"2016-06-02\",\"2016-06-03\",\"2016-06-06\",\"2016-06-07\",\"2016-06-08\",\"2016-06-09\",\"2016-06-10\",\"2016-06-13\",\"2016-06-14\",\"2016-06-15\",\"2016-06-16\",\"2016-06-17\",\"2016-06-20\",\"2016-06-21\",\"2016-06-22\",\"2016-06-23\",\"2016-06-24\",\"2016-06-27\",\"2016-06-28\",\"2016-06-29\",\"2016-06-30\",\"2016-07-01\",\"2016-07-05\",\"2016-07-06\",\"2016-07-07\",\"2016-07-08\",\"2016-07-11\",\"2016-07-12\",\"2016-07-13\",\"2016-07-14\",\"2016-07-15\",\"2016-07-18\",\"2016-07-19\",\"2016-07-20\",\"2016-07-21\",\"2016-07-22\",\"2016-07-25\",\"2016-07-26\",\"2016-07-27\",\"2016-07-28\",\"2016-07-29\",\"2016-08-01\",\"2016-08-02\",\"2016-08-03\",\"2016-08-04\",\"2016-08-05\",\"2016-08-08\",\"2016-08-09\",\"2016-08-10\",\"2016-08-11\",\"2016-08-12\",\"2016-08-15\",\"2016-08-16\",\"2016-08-17\",\"2016-08-18\",\"2016-08-19\",\"2016-08-22\",\"2016-08-23\",\"2016-08-24\",\"2016-08-25\",\"2016-08-26\",\"2016-08-29\",\"2016-08-30\",\"2016-08-31\",\"2016-09-01\",\"2016-09-02\",\"2016-09-06\",\"2016-09-07\",\"2016-09-08\",\"2016-09-09\",\"2016-09-12\",\"2016-09-13\",\"2016-09-14\",\"2016-09-15\",\"2016-09-16\",\"2016-09-19\",\"2016-09-20\",\"2016-09-21\",\"2016-09-22\",\"2016-09-23\",\"2016-09-26\",\"2016-09-27\",\"2016-09-28\",\"2016-09-29\",\"2016-09-30\",\"2016-10-03\",\"2016-10-04\",\"2016-10-05\",\"2016-10-06\",\"2016-10-07\",\"2016-10-10\",\"2016-10-11\",\"2016-10-12\",\"2016-10-13\",\"2016-10-14\",\"2016-10-17\",\"2016-10-18\",\"2016-10-19\",\"2016-10-20\",\"2016-10-21\",\"2016-10-24\",\"2016-10-25\",\"2016-10-26\",\"2016-10-27\",\"2016-10-28\",\"2016-10-31\",\"2016-11-01\",\"2016-11-02\",\"2016-11-03\",\"2016-11-04\",\"2016-11-07\",\"2016-11-08\",\"2016-11-09\",\"2016-11-10\",\"2016-11-11\",\"2016-11-14\",\"2016-11-15\",\"2016-11-16\",\"2016-11-17\",\"2016-11-18\",\"2016-11-21\",\"2016-11-22\",\"2016-11-23\",\"2016-11-25\",\"2016-11-28\",\"2016-11-29\",\"2016-11-30\",\"2016-12-01\",\"2016-12-02\",\"2016-12-05\",\"2016-12-06\",\"2016-12-07\",\"2016-12-08\",\"2016-12-09\",\"2016-12-12\",\"2016-12-13\",\"2016-12-14\",\"2016-12-15\",\"2016-12-16\",\"2016-12-19\",\"2016-12-20\",\"2016-12-21\",\"2016-12-22\",\"2016-12-23\",\"2016-12-27\",\"2016-12-28\",\"2016-12-29\",\"2016-12-30\",\"2017-01-03\",\"2017-01-04\",\"2017-01-05\",\"2017-01-06\",\"2017-01-09\",\"2017-01-10\",\"2017-01-11\",\"2017-01-12\",\"2017-01-13\",\"2017-01-17\",\"2017-01-18\",\"2017-01-19\",\"2017-01-20\",\"2017-01-23\",\"2017-01-24\",\"2017-01-25\",\"2017-01-26\",\"2017-01-27\",\"2017-01-30\",\"2017-01-31\",\"2017-02-01\",\"2017-02-02\",\"2017-02-03\",\"2017-02-06\",\"2017-02-07\",\"2017-02-08\",\"2017-02-09\",\"2017-02-10\",\"2017-02-13\",\"2017-02-14\",\"2017-02-15\",\"2017-02-16\"],\"y\":[128.88000500000001,128.779999,129.029999,129.5,133,133.60000600000001,131.60000600000001,130.86999499999999,130.570007,130.279999,129.520004,129.55999800000001,128.75,129.36999499999999,129.570007,127.220001,124.769997,124.900002,125.400002,124.949997,127.31999999999999,129.16000399999999,129.25,128.39999399999999,127.849998,128.03999300000001,126.81999999999999,124.879997,124.699997,126.400002,126.489998,125.120003,125.55999799999999,127.510002,128.11999499999999,126.400002,126.58000199999999,127.209999,128.570007,127.290001,127.129997,127.099998,126.139999,128.11999499999999,128.199997,128.86999499999999,130.41999799999999,130.63000500000001,133.13000500000001,134.53999300000001,131.58999600000001,128.63999899999999,130.13000500000001,130.570007,128.449997,126.75,126.08000199999999,127.620003,127.55999799999999,126.879997,127.19000200000001,128.949997,129.490005,130.720001,130.88000500000001,130.979996,131.63000500000001,132.970001,132.91000399999999,132.259995,131.949997,131.449997,131.38999899999999,130.66000399999999,130.94000199999999,130.58000200000001,129.69000199999999,129.21000699999999,128.08000200000001,129.33999600000001,130.179993,128.33000200000001,127.239998,127.849998,127.879997,128.30999800000001,127.81999999999999,128.05999800000001,127.610001,129.800003,129.199997,127.989998,126.470001,126.120003,126.94000200000001,126.69000200000001,126.230003,126.150002,124.639999,124.05999799999999,123.849998,125.760002,126.370003,127.150002,128.570007,129.61999499999999,132.970001,132.91999799999999,125.5,127.089996,125.739998,123.610001,123.910004,123.5,122.56999999999999,122.639999,122.56999999999999,117.699997,117.44000200000001,116.5,116.25,119.989998,118.18000000000001,115.41999800000001,116.400002,116.30999799999999,117.650002,117.44000200000001,116.519997,114.349998,111.900002,108.800003,111.110001,109.889999,113.239998,113.30999799999999,114.529999,111.879997,112.339996,112.779999,110.449997,112.55999799999999,114.019997,113.279999,114.209999,116.889999,116.529999,116.540001,116.489998,114.300003,115.370003,114.18000000000001,114.720001,115.5,116.69000200000001,114.56999999999999,113.510002,111.540001,109.620003,111.010002,111.370003,111.739998,111.769997,110.19000200000001,112.279999,112.75,112.449997,111.519997,112.099998,112,111.75,114.16999800000001,115.58000199999999,115.5,119.230003,118.129997,116.540001,119.300003,120.69000200000001,121.220001,121.360001,123.489998,123.81999999999999,122.69000200000001,121.80999799999999,121.80999799999999,118.06999999999999,117.41999800000001,116.81999999999999,115.56999999999999,114.239998,115.050003,117.489998,119.75,119.91999800000001,119.730003,119.349998,119.230003,118.410004,119.410004,118.80999799999999,118.110001,116.790001,119.25,119.860001,118.599998,117.69000200000001,116.94000200000001,115.389999,112.68000000000001,112.800003,111.989998,112.25,109.519997,107.370003,107.720001,108.849998,109,107.69000200000001,109.43000000000001,108.699997,107.029999,105.370003,105.849998,102.370003,100.129997,99.110000999999997,99.059997999999993,100.69000200000001,101.19000200000001,100.480003,97.709998999999996,98.650002000000001,98.190002000000007,97.879997000000003,101.459999,101.529999,100.879997,96.629997000000003,94.519997000000004,97.339995999999999,96.709998999999996,96.040001000000004,96.839995999999999,97.330001999999993,96.919998000000007,95.699996999999996,95.940002000000007,96.349997999999999,94.720000999999996,94.5,96.849997999999999,98.209998999999996,98.889999000000003,96.760002,96.900002000000001,96.5,96.379997000000003,96.760002,98.019997000000004,98.230002999999996,100.769997,100.889999,101.709999,103.75,102.83000199999999,101.760002,101.58000199999999,102.239998,102.279999,102.910004,105.18000000000001,106.30999799999999,106.470001,106.5,107.650002,107.290001,107.06999999999999,106.25,106.19000200000001,107.790001,110.41999800000001,109.900002,110,112.19000200000001,110.730003,110.980003,110.41999800000001,109.769997,110.610001,110.5,112.339996,112.389999,112.300003,108.949997,108,108.089996,106.93000000000001,106.480003,105.650002,105.300003,98.709998999999996,97.879997000000003,94.720000999999996,94.080001999999993,95.739998,95.900002000000001,94.069999999999993,93.449996999999996,93.769997000000004,93.569999999999993,93.569999999999993,92.779999000000004,91.669998000000007,94.389999000000003,94.699996999999996,95.209998999999996,94.639999000000003,95.430000000000007,97.190002000000007,98.089995999999999,99.739998,100.730003,100.470001,100.400002,99.540001000000004,97.839995999999999,98.269997000000004,101.889999,99.870002999999997,99.559997999999993,99.989998,99.349997999999999,99.120002999999997,98.480002999999996,98.410004000000001,97.75,96.650002000000001,96.569999999999993,96.349997999999999,96.889999000000003,96.290001000000004,94.660004000000001,93.050003000000004,93.660004000000001,94.550003000000004,95.769997000000004,96.470000999999996,95.400002000000001,95.660004000000001,96.5,96.889999000000003,97.650002000000001,97.699996999999996,97.669998000000007,98.989998,99.300003000000004,100.129997,100,100.459999,101,99.300003000000004,98.839995999999999,97.970000999999996,104.349998,104.449997,104.550003,106.150002,106.06999999999999,105.839996,106,107.650002,108.370003,108.94000200000001,108.900002,108.93000000000001,108.44000200000001,109.540001,110.230003,109.370003,109.599998,109.69000200000001,109.099998,109.31999999999999,108.75,107.879997,107.949997,107.44000200000001,106.5,106.56999999999999,106.800003,108,108.300003,108.760002,107.269997,105.720001,105.720001,108.790001,113.029999,115.730003,116.129997,116.18000000000001,114.120003,113.989998,114.94000200000001,114.790001,113.389999,113.18000000000001,114.639999,113.800003,113.370003,113.050003,114.30999799999999,113.660004,114.339996,114.55999799999999,116.75,118.69000200000001,117.980003,117.44000200000001,118.16999800000001,117.839996,118.209999,117.760002,117.379997,116.910004,117.739998,118.360001,115.699997,115.860001,115.209999,114.230003,113.769997,112.349998,111.459999,110.25,110.510002,111.720001,111.31999999999999,111.089996,108.870003,107.80999799999999,107.68000000000001,110.230003,110.349998,110.540001,111.989998,112.41999800000001,111.510002,111.870003,112.470001,112.029999,112.199997,110.94000200000001,110.089996,110.029999,110.360001,111.19000200000001,112.43000000000001,114.699997,115,115.91999800000001,116.199997,116.730003,116.5,117.379997,117.5,117.400002,116.510002,116.519997,117.800003,118.019997,117.110001,117.199997,116.33000199999999,116.510002,116.860001,118.160004,119.43000000000001,119.379997,119.93000000000001,119.300003,119.620003,120.239998,120.5,120.089996,120.449997,120.80999799999999,120.099998,122.099998,122.44000200000001,122.349998,121.629997,121.389999,130.490005,129.38999899999999,129.19000199999999,130.5,132.08999600000001,132.220001,132.449997,132.94000199999999,133.820007,135.08999600000001,136.270004,135.89999399999999],\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nA random walk is the simplest mathematical model of temporal dependence. Each new value is just the previous value plus a random shock (white noise).\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate Random Walk\ntN <- 200\ny <- numeric(tN)\ny[1] <- stock$AAPL.High[1]\nfor (ti in 2:tN) {\n    y[ti] <- y[ti-1] + runif(1, -10, 10)\n}\n#x <- runif(tN, -1,1) White Noise\n\ny_dat <- data.frame(Date=1:tN, RandomWalk=y)\nfig <- plot_ly(y_dat, type = 'scatter', mode = 'lines') %>%\n  add_trace(x=~Date, y=~RandomWalk) %>%\n  layout(showlegend = F)\nfig\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-75ef2de0d90b4f763ac5\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-75ef2de0d90b4f763ac5\">{\"x\":{\"visdat\":{\"6041d918454\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"6041d918454\",\"attrs\":{\"6041d918454\":{\"mode\":\"lines\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\"},\"6041d918454.1\":{\"mode\":\"lines\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"x\":{},\"y\":{},\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"showlegend\":false,\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Date\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"RandomWalk\"},\"hovermode\":\"closest\"},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"mode\":\"lines\",\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"mode\":\"lines\",\"type\":\"scatter\",\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200],\"y\":[128.88000500000001,125.53562624457211,120.72901906522841,125.93037653791637,134.45261432400824,132.33965529206128,129.14022689296783,134.87102371252061,143.0059949782017,149.24468354864896,148.45491554665298,146.23205321918161,152.76058632026346,152.32695915347816,161.65362981690944,156.42770617346198,164.48891124765308,160.00318046270789,151.6623693339798,146.22694904993207,142.96470335296274,139.59541469889612,130.78419199290605,135.73496567162604,132.85758483766497,131.97447768024088,135.38813569660218,135.64347554541112,144.64842681850226,144.75282219315798,141.58569965123118,137.66138898751618,137.79923987186433,140.37480862888427,139.26235274954618,133.53020416649909,131.51668530034752,130.99400412834169,131.03599130253227,135.07541006042541,125.72755442078144,124.58802985570313,116.38581803145738,121.9141485596347,125.24062470610173,120.20152874833823,122.01233042946936,118.23996735348285,127.10314742366702,136.15659833031626,143.43125562260778,152.58229944466532,160.0925021440062,157.04655484839262,166.13702695893974,172.77076121496887,171.60607106595219,163.83647661267699,173.48559071852745,164.07902347001166,168.56602490025492,172.65243783204735,182.09101573641331,184.92462085171522,182.82464151813568,192.79460241164,184.18965532987298,181.78135030048819,173.01328537131579,174.93146736717702,176.23216520606459,185.49600072747947,179.71837888549001,180.29860124069185,182.03758877313615,176.97187058239163,185.33803729417653,192.60308594520123,201.2494431536916,199.82252867038281,195.35152959714563,185.77626249364496,192.47400681099774,197.77367192863406,192.28716872244061,192.52100432368846,182.65852346627892,185.77595410014422,192.48273925001652,186.55383074733348,177.44262103534223,176.93244283164771,180.26815935115249,176.73937245349319,186.7030520372364,190.46019414051355,197.60647684878589,187.61988546310843,180.23895731273026,181.89148235677661,187.34400570469828,194.38563595603139,200.44948251995177,206.65539284779609,210.41185853614391,216.58318186256022,208.00198594185443,208.3379655292529,202.61375967490406,211.17967376562686,207.18247722445906,214.90899897257717,208.49792577403517,208.65691596253694,213.64736483509571,204.84224658070983,203.35763060099364,206.21618670954288,209.2233418029073,200.74012775516988,207.84321787844331,205.71411551519216,214.79519189878286,218.07499130799354,224.55290522969247,216.18904693595053,208.79506008776755,207.18885339408101,213.01723047702492,209.23679362128408,206.15294840729715,199.22655885650695,189.7013020243767,181.40913263506175,180.58179087082775,189.73810841406615,186.46542653518648,186.91702266766609,189.80883709232242,196.91213422997774,196.77424386686565,206.10442689697177,205.76983915253462,197.36529879814864,195.63241920976819,202.77533312405379,206.04904222845019,202.22002618092031,194.46080648417504,189.67446441373707,196.89190580121161,191.8911552017826,196.81830107311637,190.62929993572564,185.0676044084403,191.63014468814166,200.20221898409457,204.77072517464788,206.94824502414943,204.0173203878376,195.56748020074249,192.63836877497764,197.86896199530841,189.83632419801236,182.97814146692784,184.11092062092305,178.44171051478864,176.81063352229924,171.29473708647222,163.48250954954804,156.54996458983899,161.42384179479362,157.0343431791562,164.34366779944779,160.4815945549208,160.48434908113362,164.35842460564257,171.069718222906,161.57708282659681,160.16050900409849,163.61738802011044,154.66183839443059,149.75039879868658,149.29750896136196,141.07232507861139,149.81060312672437,156.68783400284977,158.70220608620824,152.5691302687201,143.33136451973499,148.79682889285417,146.64577972221107,139.5429123759541,145.59224633577199,138.23089869770141,145.29861141539098,136.58809289413423,141.39549886885018,132.08700644860895,137.48116088176997],\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"line\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nIn both plots, we see that today's value is not independent of past values. In contrast to cross-sectional data (e.g. individual incomes), time series often require special methods to account for memory and nonstationarity.\n\n#### **Stationary**. {-}\nA stationary time series is one whose statistical properties --- mean, variance, and autocovariance --- do not change over time. Formally\n\n* Stationary Means: $E[y_{t}]=E[y_{t'}]$ for all periods $t, t'$\n* Stationary Vars: $V[y_{t}]=V[y_{t'}]$ for all periods $t, t'$\n\nE.g., \\( y_t = \\beta t + u_t, \\quad u_t \\sim \\text{N}(0, \\sigma + \\alpha t) \\)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntN <- 200\nsimulate_series <- function(beta, alpha, sigma=.2){\n    y <- numeric(tN)\n    for (ti in 1:tN) {\n        mean_ti <- beta*ti\n        sd_ti <- (.2 + alpha*ti)\n        y[ti] <- mean_ti + rnorm(1, sd=sd_ti)\n    }\n    return(y)\n}\n\n# Plotting Functions\nplot_setup <- function(alpha, beta){\n    plot.new()\n    plot.window(xlim=c(1,tN), ylim=c(-5,20))\n    axis(1)\n    axis(2)\n    mtext(expression(y[t]),2, line=2.5)\n    mtext(\"Time (t)\", 1, line=2.5)\n}\nplot_title <- function(alpha, beta){\n    beta_name <- ifelse(beta==0, 'Mean Stationary', 'Mean Nonstationary')\n    alpha_name <- ifelse(alpha==0, 'Var Stationary', 'Var Nonstationary')\n    title(paste0(beta_name,', ', alpha_name), font.main=1, adj=0)\n}\n\npar(mfrow = c(2, 2))\nfor(alpha in c(0,.015)){\nfor(beta in c(0,.05)){\n    plot_setup(alpha=alpha, beta=beta)\n    for( sim in c('red','blue')){\n        y_sim <- simulate_series(beta=beta, alpha=alpha)\n        lines(y_sim, col=adjustcolor(sim ,alpha.f=0.5), lwd=2)\n    }\n    plot_title(alpha=alpha, beta=beta)\n}}\n```\n\n::: {.cell-output-display}\n![](02_04_ObservationalData_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n#### **Measures of temporal association**. {-}\nTime series often exhibit serial dependenceâ€”values today are related to past values, and potentially to other processes evolving over time. We can visualize this using correlation-based diagnostics.\n\nThe Autocorrelation Function (AFC) measures correlation between a time series and its own lagged values:\n\n$ACF_{Y}(k) = \\frac{Cov(Y_{t},Y_{t-k})}{ \\sqrt{Var(Y_{t})Var(Y_{t-k})}}$\n\nThis helps detect temporal persistence (memory). For stationary processes, the ACF typically decays quickly, whereas for nonstationary processes, it typically decays slowly or persists.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\nfor(alpha in c(0,.015)){\nfor(beta in c(0,.05)){\n    y_sim <- simulate_series(beta=beta, alpha=alpha)\n    acf(y_sim, main='')\n    plot_title(alpha=alpha, beta=beta)\n}}\n```\n\n::: {.cell-output-display}\n![](02_04_ObservationalData_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThe Cross-Correlation Function (CCF) measures correlation between two time series at different lags:\n\n$CCF_{YX}(k) = \\frac{Cov(Y_{t},X_{t-k})}{ \\sqrt{Var(Y_t)Var(X_{t-k})}}$\n\nThis is useful for detecting lagged relationships between two series, such as leading indicators or external drivers. (If $X$ is white noise, any visible structure in the CCF likely reflects nonstationarity in $Y$.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_sim <- runif(tN, -1,1) # White Noise\npar(mfrow = c(2, 2))\nfor(alpha in c(0,.015)){\nfor(beta in c(0,.05)){\n    y_sim <- simulate_series(beta=beta, alpha=alpha)\n    ccf(y_sim, x_sim, main='')\n    plot_title(alpha=alpha, beta=beta)\n}}\n```\n\n::: {.cell-output-display}\n![](02_04_ObservationalData_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Spatial Interdependence\n\nMany observational datasets exhibit spatial dependence, meaning that values at one location tend to be related to values at nearby locations. This violates the standard assumption of independent observations used in many classical statistical methods.\n\nFor example, elevation is spatially dependent: if one location is at high elevation, nearby locations are also likely (though not guaranteed) to be high. Similarly, socioeconomic outcomes like disease rates or income often cluster geographically due to shared environmental or social factors.\n\nJust as stock prices today depend on yesterday, spatial variables often depend on neighboring regions, creating a need for specialized statistical methods that account for spatial autocorrelation.\n\n#### **Raster vs. Vector Data**. {-}\nSpatial data typically comes in two formats, each suited to different types of information:\n\n* Vector data uses geometric shapes (points, lines, polygons) to store data. E.g., a census tract map that stores data on population demographics.\n* Raster data uses grid cells (typically squares, but sometimes hexagons) to store data. E.g., an image that stores data on elevation above seawater.\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vector Data\nlibrary(sf)\nnorthcarolina_vector <- st_read(system.file(\"shape/nc.shp\", package=\"sf\"))\n## Reading layer `nc' from data source `/home/Jadamso/R-Libs/sf/shape/nc.shp' using driver `ESRI Shapefile'\n## Simple feature collection with 100 features and 14 fields\n## Geometry type: MULTIPOLYGON\n## Dimension:     XY\n## Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965\n## Geodetic CRS:  NAD27\nplot(northcarolina_vector['BIR74'], main='Number of Live Births in 1974')\n```\n\n::: {.cell-output-display}\n![](02_04_ObservationalData_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# https://r-spatial.github.io/spdep/articles/sids.html\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Raster Data\nlibrary(terra)\nluxembourg_elevation_raster <- rast(system.file(\"ex/elev.tif\", package=\"terra\"))\nplot(luxembourg_elevation_raster)\n```\n\n::: {.cell-output-display}\n![](02_04_ObservationalData_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n#### **Stationary.** {-}\nJust as with temporal data, stationarity in spatial data means that the statistical properties (like mean, variance, or spatial correlation) are roughly the same across space.\n\n* Stationary Means: $E[y(s)]=E[y(s')]$ for all locations $s,s'$\n* Stationary Vars: $V[y(s)]=V[y(s')]$ for all locations $s,s'$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulated 2D spatial fields\nset.seed(1)\nn <- 20\nx <- y <- seq(0, 1, length.out = n)\ngrid <- expand.grid(x = x, y = y)\n\n# 1. Stationary: Gaussian with constant mean and var\nz_stationary <- matrix(rnorm(n^2, 0, 1), n, n)\n\n# 2. Nonstationary: Mean increases with x and y\nz_nonstationary <- outer(x, y, function(x, y) 3*x*y) + rnorm(n^2, 0, 1)\n\npar(mfrow = c(1, 2))\n# Stationary field\nimage(x, y, z_stationary,\n      main = \"Stationary Field\",\n      col = terrain.colors(100),\n      xlab = \"x\", ylab = \"y\")\n# Nonstationary field\nimage(x, y, z_nonstationary,\n      main = \"Nonstationary Field\",\n      col = terrain.colors(100),\n      xlab = \"x\", ylab = \"y\")\n```\n\n::: {.cell-output-display}\n![](02_04_ObservationalData_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n#### **Measures of spatial association**. {-}\nJust like temporal data may exhibit autocorrelation, spatial data may show spatial autocorrelation or spatial cross-correlationâ€”meaning that observations located near each other are more (or less) similar than we would expect under spatial independence.\n\nAutocorrelation. We can measure spatial *autocorrelation* using Moran's I, a standard index of spatial dependence. Global Moranâ€™s I summarizes overall spatial association (just like the ACF)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Raster Data Example\nautocor(luxembourg_elevation_raster, method='moran', global=T)\n## elevation \n## 0.8917057\n```\n:::\n\n\nCross-Correlation. We can also assesses the relationship between two variables at varying distances. \n\n::: {.cell}\n\n```{.r .cell-code}\n# Vector Data Example\ndat <- as.data.frame(northcarolina_vector)[, c('BIR74', 'SID74')]\nmu <- colMeans(dat)\n\n# Format Distances\ndmat <- st_distance( st_centroid(northcarolina_vector) )\ndmat <- units::set_units(dmat, 'km')\n\n# At Which Distances to Compute CCF\n# summary(dmat[,1])\nrdists <- c(-1,seq(0,100,by=25)) # includes 0\nrdists <- units::set_units(rdists , 'km')\n\n# Compute Cross-Covariances\nvarXY <- prod( apply(dat, 2, sd) )\nCCF <- lapply( seq(2, length(rdists)), function(ri){\n    # Which Observations are within (rmin, rmax] distance\n    dmat_r <- dmat\n    d_id <- (dmat_r > rdists[ri-1] & dmat_r <= rdists[ri]) \n    dmat_r[!d_id]  <- NA\n    # Compute All Covariances (Stationary)\n    covs_r <- lapply(1:nrow(dmat_r), function(i){\n        pairsi <- which(!is.na(dmat_r[i,]))        \n        covXiYj <- sapply(pairsi, function(j) {\n            dXi <- dat[i,1] - mu[1]\n            dYj <- dat[j,2] - mu[2]\n            return(dXi*dYj)\n        })\n        return(covXiYj)\n    })\n    corXY <- unlist(covs_r)/varXY\n    return(corXY)\n} )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot Cross-Covariance Function\nx <- as.numeric(rdists[-1])\n\npar(mfrow=c(1,2))\n\n# Distributional Summary\nboxplot(CCF,\n    outline=F, whisklty=0, staplelty=0,\n    ylim=c(-1,1), #quantile(unlist(CCF), probs=c(.05,.95)),\n    names=x, \n    main='',\n    font.main=1,\n    xlab='Distance [km]',\n    ylab='Cross-Correlation of BIR74 and SID74')\ntitle('Binned Medians and IQRs', font.main=1, adj=0)\nabline(h=0, lty=2)\n\n# Inferential Summary\nCCF_means <- sapply(CCF, mean)\nplot(x, CCF_means,\n    ylim=c(-1,1),\n    type='o', pch=16,\n    main='',\n    xlab='Distance [km]',\n    ylab='Cross-Correlation of BIR74 and SID74')\ntitle('Binned Means + 95% Confidence Band', font.main=1, adj=0)\nabline(h=0, lty=2)    \n# Quick and Dirty Subsampling CI\nCCF_meanCI <- sapply(CCF, function(corXY){\n    ss_size <- floor(length(corXY)*3/4)\n    corXY_boot <- sapply(1:200, function(b){\n        corXY_b <- sample(corXY, ss_size, replace=F)\n        mean(corXY_b, na.rm=T)\n    })\n    quantile(corXY_boot,  probs=c(.025,.975), na.rm=T)\n})\npolygon( c(x, rev(x)), \n    c(CCF_meanCI[1,], rev(CCF_meanCI[2,])), \n    col=grey(0,.25), border=NA)\n```\n\n::: {.cell-output-display}\n![](02_04_ObservationalData_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Variable Interdependence\n\nIn addition to spatial and temporal dependence, many observational datasets exhibit interdependence between variables. Many economic variables are endogenous: meaning that they are an outcome determined (or caused: $\\to$) by some other variable.\n\n * If $Y \\to X$, then we have reverse causality\n * If $Y \\to X$ and $X \\to Y$, then we have simultaneity\n * If $Z\\to Y$ and either $Z\\to X$ or $X \\to Z$, then we have omitted a potentially important variable\n\nThese endogeneity issues imply $X$ and $\\epsilon$ are correlated, which is a barrier to interpreting OLS estimates causally. ($X$ and $\\epsilon$ may be correlated for other reasons too, such as when $X$ is measured with error.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate data with an endogeneity issue\nn <- 300\nz <- rbinom(n,1,.5)\nxy <- sapply(z, function(zi){\n    y <- rnorm(1,zi,1)\n    x <- rnorm(1,zi*2,1)\n    c(x,y)\n})\nxy <- data.frame(x=xy[1,],y=xy[2,])\nplot(y~x, data=xy, pch=16, col=grey(0,.5))\nabline(lm(y~x,data=xy))\n```\n\n::: {.cell-output-display}\n![](02_04_ObservationalData_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nWith multiple linear regression, endogeneity biases are not just a problem for your main variable of interest. Suppose your interested in how $x_{1}$ affects $y$, conditional on $x_{2}$. Letting $X=[x_{1}, x_{2}]$, you estimate \n\\begin{eqnarray}\n\\hat{\\beta}_{OLS} = [X'X]^{-1}X'y\n\\end{eqnarray}\nYou paid special attention in your research design to find a case where $x_{1}$ is truly exogenous. Unfortunately, $x_{2}$ is correlated with the error term. (How unfair, I know, especially after all that work). Nonetheless,\n\\begin{eqnarray}\n\\mathbb{E}[X'\\epsilon] = \n\\begin{bmatrix}\n0 \\\\ \\rho\n\\end{bmatrix}\\\\\n\\mathbb{E}[ \\hat{\\beta}_{OLS} - \\beta] = [X'X]^{-1} \\begin{bmatrix}\n0 \\\\ \\rho\n\\end{bmatrix} = \n\\begin{bmatrix}\n\\rho_{1} \\\\ \\rho_{2}\n\\end{bmatrix}\n\\end{eqnarray}\nThe magnitude of the bias for $x_{1}$ thus depends on the correlations between $x_{1}$ and $x_{2}$ as well as $x_{2}$ and $\\epsilon$.\n\nI will focus on the seminal economic example to provide some intuition.\n\n#### **Competitive Market Equilibrium**. {-}\nThis model has three structural relationships: (1) market supply is the sum of quantities supplied by individual firms at a given price, (2) market demand is the sum of quantities demanded by individual people at a given price, and (3) market supply equals market demand in equilibrium. Assuming market supply and demand are linear, we can write these three relationships as\n\\begin{eqnarray}\n\\label{eqn:market_supply}\nQ_{S}(P) &=& A_{S} + B_{S} P + E_{S},\\\\\n\\label{eqn:market_demand}\nQ_{D}(P) &=& A_{D} - B_{D} P + E_{D},\\\\\n\\label{eqn:market_eq}\nQ_{D} &=& Q_{S} = Q.\n%%  $Q_{D}(P) = \\sum_{i} q_{D}_{i}(P)$, \n\\end{eqnarray}\nThis last equation implies a simultaneous \"reduced form\" relationship where both the price and the quantity are outcomes. With a linear parametric structure to these equations, we can use algebra to solve for the equilibrium price and quantity analytically as\n\\begin{eqnarray}\nP^{*} &=& \\frac{A_{D}-A_{S}}{B_{D}+B_{S}} + \\frac{E_{D} - E_{S}}{B_{D}+B_{S}}, \\\\\nQ^{*} &=& \\frac{A_{S}B_{D}+ A_{D}B_{S}}{B_{D}+B_{S}} + \\frac{E_{S}B_{D}+ E_{D}B_{S}}{B_{D}+B_{S}}.\n\\end{eqnarray}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Demand Curve Simulator\nqd_fun <- function(p, Ad=8, Bd=-.8, Ed_sigma=.25){\n    Qd <- Ad + Bd*p + rnorm(1,0,Ed_sigma)\n    return(Qd)\n}\n\n# Supply Curve Simulator\nqs_fun <- function(p, As=-8, Bs=1, Es_sigma=.25){\n    Qs <- As + Bs*p + rnorm(1,0,Es_sigma)\n    return(Qs)\n}\n\n# Quantity Supplied and Demanded at 3 Prices\ncbind(P=8:10, D=qd_fun(8:10), S=qs_fun(8:10))\n##       P          D          S\n## [1,]  8  1.1925652 0.01120111\n## [2,]  9  0.3925652 1.01120111\n## [3,] 10 -0.4074348 2.01120111\n\n# Market Equilibrium Finder\neq_fun <- function(demand, supply, P){\n    # Compute EQ (what we observe)\n    eq_id <- which.min( abs(demand-supply) )\n    eq <- c(P=P[eq_id], Q=demand[eq_id]) \n    return(eq)\n}\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulations Parameters\nN <- 300 # Number of Market Interactions\nP <- seq(5,10,by=.01) # Price Range to Consider\n\n# Generate Data from Competitive Market  \n# Plot Underlying Process\nplot.new()\nplot.window(xlim=c(0,2), ylim=range(P))\nEQ1 <- sapply(1:N, function(n){\n    # Market Data Generating Process\n    demand <- qd_fun(P)\n    supply <- qs_fun(P)\n    eq <- eq_fun(demand, supply, P)    \n    # Plot Theoretical Supply and Demand\n    lines(demand, P, col=grey(0,.01))\n    lines(supply, P, col=grey(0,.01))\n    points(eq[2], eq[1], col=grey(0,.05), pch=16)\n    # Save Data\n    return(eq)\n})\naxis(1)\naxis(2)\nmtext('Quantity',1, line=2)\nmtext('Price',2, line=2)\n```\n\n::: {.cell-output-display}\n![](02_04_ObservationalData_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nSuppose we ask \"what is the effect of price on quantity?\" You can simply run a regression of quantity (\"Y\") on price (\"X\"): $\\widehat{\\beta}_{OLS} = Cov(Q^{*}, P^{*}) / Var(P^{*})$. You get a number back, but it is hard to interpret meaningfully. \n\n::: {.cell}\n\n```{.r .cell-code}\n# Analyze Market Data\ndat1 <- data.frame(t(EQ1), cost='1', T=1:N)\nreg1 <- lm(Q~P, data=dat1)\nsummary(reg1)\n## \n## Call:\n## lm(formula = Q ~ P, data = dat1)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -0.57279 -0.11977 -0.00272  0.11959  0.45525 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(>|t|)  \n## (Intercept) -0.21323    0.43212  -0.493   0.6221  \n## P            0.12355    0.04864   2.540   0.0116 *\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.1674 on 298 degrees of freedom\n## Multiple R-squared:  0.02119,\tAdjusted R-squared:  0.0179 \n## F-statistic: 6.451 on 1 and 298 DF,  p-value: 0.0116\n```\n:::\n\nThis simple derivation has a profound insight: price-quantity data does not generally tell you how price affects quantity (or vice-versa). The reason is simultaneity: price and quantity mutually cause one another in markets.^[Although there are many ways this simultaneity can happen, economic theorists have made great strides in analyzing the simultaneity problem as it arises from equilibrium market relationships. In fact, 2SLS arose to understand agricultural markets.]\n\nMoreover, this example also clarifies that our initial question \"what is the effect of price on quantity?\" is misguided. We could more sensibly ask  \"what is the effect of price on quantity supplied?\" or \"what is the effect of price on quantity demanded?\"\n\n## Further Reading\n\n\n",
    "supporting": [
      "02_04_ObservationalData_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/plotly-binding-4.11.0/plotly.js\"></script>\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}