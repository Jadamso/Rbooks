{
  "hash": "41d3ab54f9b7348276d8a1d03386c4e1",
  "result": {
    "engine": "knitr",
    "markdown": "\n# Misc. Bivariate Topics\n***\n\n\n## Hypothesis Testing\n\n#### **Gradients**.{-}\n\nOften, we are interested in gradients: how $Y$ changes with $X$. The linear model depicts this as a simple constant, $\\hat{b}_{1}$, whereas other models do not. A great first way to assess gradients is to plot the predicted values over the explanatory values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adaptive-width subsamples with non-uniform weights\nxy <- USArrests[,c('UrbanPop','Murder')]\nxy0 <- xy[order(xy$UrbanPop),]\nnames(xy0) <- c('x','y')\n\n\nplot(y~x, pch=16, col=grey(0,.5), dat=xy0)\nreg_lo <- loess(y~x, data=xy0, span=.6)\n\nred_col <- rgb(1,0,0,.5)\nlines(xy0$x, predict(reg_lo),\n    col=red_col, type='o', pch=2)\n```\n\n::: {.cell-output-display}\n![](02_06_MiscTopics_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nMore formally, there are two ways to summarize gradients\n\n1. For all methods, including regressograms, you can approximate gradients with small finite differences. For some small difference $d$, we can manually compute\n\\begin{eqnarray}\n\\hat{b}_{1}(x) &=& \\frac{ \\hat{y}(x+\\frac{d}{2}) - \\hat{y}(x-\\frac{d}{2})}{d},\n\\end{eqnarray}\n\n2. When using split-sample regressions or local linear regressions, you can use the estimated slope coefficients $\\hat{b}_{1}(x)$ as gradient estimates in each direction.\n\nAfter computing gradients, you can summarize them in various plots\n\n* Histograms, Scatterplots\n* Plot of gradients and their CI's, \\cite{Chaudhuri1999, HendersonEtAl2012}\n\nYou may also be interested in a particular gradient or a single summary statistic. For example, a bivariate regressogram can estimate the \"marginal effect at the mean\"; $\\hat{b}_{1}( x=\\hat{M}_{X} )$. More often you are interested in the \"mean of the gradients\", sometimes said simply as \"average effect\", which averages the gradients over all datapoints in the dataset: $1/n \\sum_{i}^{n} \\hat{b}_{1}(x=X_{i})$. Alternatively, you may be interested in the median of the gradients, or measures of \"effect heterogeneity\": the interquartile range or standard deviation of the gradients. Such statistics are single numbers that can be presented in tabular form: \"mean gradient (sd gradient)\". You can alternative report standard errors: \"mean gradient (estimated se), sd gradient (estimated se)\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Gradients    \npred_lo <- predict(reg_lo)\ngrad_x  <- xy0$x[-1]\ngrad_dx <- diff(xy0$x)\ngrad_dy <- diff(pred_lo)\ngrad_lo <-grad_dy/grad_dx\n\n## Visual Summary\npar(mfrow=c(1,2))\nhist(grad_lo,  breaks=20,\n    border=NA, freq=F,\n    col=red_col,\n    xlab=expression(d~hat(y)/dx),\n    main='') ## Distributional Summary\nplot(grad_x+grad_dx, grad_lo,\n    xlab='x', ylab=expression(d~hat(y)/dx),\n    col=red_col, pch=16) ## Diminishing Returns?\n```\n\n::: {.cell-output-display}\n![](02_06_MiscTopics_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n\n## Tabular Summary\ntab_stats <- c(\n    mean(grad_lo, na.rm=T),\n    sd(grad_lo, na.rm=T))\ntab_stats\n## [1] 0.01554515 0.16296598\n\n## Use bootstrapping to get SE's\nboot_stats <- matrix(NA, nrow=299, ncol=2)\nfor(b in 1:nrow(boot_stats)){\n    xy_b <- xy0[sample(1:nrow(xy0), replace=T),]\n    reg_lo <- loess(y~x, data=xy_b, span=.6)\n    pred_lo <- predict(reg_lo)\n    grad_lo <- diff(pred_lo)/diff(xy_b$x)\n    dydx_mean <- mean(grad_lo, na.rm=T)\n    dydx_sd <- sd(grad_lo, na.rm=T)\n    boot_stats[b,1] <- dydx_mean\n    boot_stats[b,2] <- dydx_sd\n}\napply(boot_stats, 2, sd)\n## [1] 0.05448011 0.06159208\n```\n:::\n\n\n\n#### **Diminishing Returns**. {-}\n\nJust as before, there are diminishing returns to larger sample sizes for bivariate statistics. For example, the slope coefficient in simple OLS varies less from sample to sample when the samples are larger. Same for the gradients in loess. This decreased variability across samples makes hypothesis testing more accurate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nB <- 300\nNseq <- seq(10,50, by=1)\nSE <- sapply(Nseq, function(n){\n    sample_stat <- sapply(1:B, function(b){\n        x <- rnorm(n)\n        e <- rnorm(n)        \n        y <- x*3 + x + e\n        reg_lo <- loess(y~x)\n        pred_lo <- predict(reg_lo)\n        grad_lo <- diff(pred_lo)/diff(x)\n        dydx_mean <- mean(grad_lo, na.rm=T)\n        #dydx_sd <- sd(grad_lo, na.rm=T)\n        return(dydx_mean)\n    })\n    sd(sample_stat)\n})\n\nplot(Nseq, SE, pch=16, col=grey(0,.5),\n    main='Mean gradient', font.main=1,\n    ylab='standard error',\n    xlab='sample size')\n```\n\n::: {.cell-output-display}\n![](02_06_MiscTopics_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n#### **Type II Errors**. {-}\n\nWhen we test a hypothesis, we start with a claim called the null hypothesis $H_0$ and an alternative claim $H_A$. Because we base conclusions on sample data, which has variability, mistakes are possible. There are two types of errors:\n\n* *Type I Error*: Rejecting a true null hypothesis. (False Positive). \n* *Type II Error*: Failing to reject a false null hypothesis (False Negative). \n\n| True Situation | Decision: Fail to Reject $H_0$ | Decision: Reject $H_0$ |\n|---|---|---|\n| $H_0$ is True |  Correct (no detection)  |  Type I Error (False Positive) |\n| $H_0$ is False |  Type II Error (False Negative; missed detection) | Correct (effect detected) |\n\nHere is a Courtroom example: Someone suspected of committing a crime is at trial, and they are either guilty or not (a Bernoulli random variable). You hypothesize that the suspect is innocent, and a jury can either free or convict them.\n\n\n| True Situation | Decision: Free | Decision: Convict |\n|---|---|---|\n| Suspect Innocent |  Correctly Freed  | Falsely Convicted |\n| Suspect Guilty   |  Falsely Freed    | Correctly Convicted |\n\n#### **Statistical Power**. {-}\n\nThe probability of Type I Error is called *significance level* and denoted by $Prob(\\text{Type I Error}) = \\alpha$. The probability of correctly rejecting a false null is called *power* and denoted by $\\text{Power} = 1 - \\beta = 1 -  Prob(\\text{Type II Error})$. \n\nSignificance is often chosen by statistical analysts to be $\\alpha=0.05$. Power is less often chosen, instead following from a decision about power.\n\n\n:::{.callout-tip icon=false collapse=\"true\"}\nThe code below runs a small simulation using a shifted, nonparametric bootstrap. Two-sided test; studentized statistic, for $H0: \\mu = 0$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Power for Two-sided test;\n# nonparametric bootstrap, studentized statistic\nn <- 25\nmu <- 0\nalpha <- 0.05\nB <- 299\n\nsim_reps <- 100 \n\np_values <- vector(length=sim_reps)\nfor (i in seq(p_values)) {\n    # Generate data\n    X <- rnorm(n, mean=0.2, sd=1)\n    # Observed statistic\n    X_bar <- mean(X)\n    T_obs <-  (X_bar - mu) / (sd(X)/ sqrt(n)) ##studentized\n    # Bootstrap null distribution of the statistic\n    T_boot <- vector(length=B)\n    X_null <- X - X_bar + mu # Impose the null by recentering\n    for (b in seq(T_boot)) {\n      X_b <- sample(X_null, size = n, replace = TRUE)\n      T_b <- (mean(X_b) - mu) / (sd(X_b)/sqrt(n))\n      T_boot[b] <- T_b\n    }\n    # Two-sided bootstrap p-value\n    pval <- mean(abs(T_boot) >= abs(T_obs))\n    p_values[i] <- pval\n    }\npower <- mean(p_values < alpha)\npower\n```\n:::\n\n:::\n\nThere is an important Trade-off for fixed sample sizes: Increasing significance (fewer false positive) often lowers power (more false negatives). Generally, power depends on the effect size and sample size: bigger true effects and larger $n$ make it easier to detect real differences (higher power, lower $\\beta$).\n\n\n\n## Predictions\n\n#### **Describe vs. Explain vs. Predict**.{-}\n\nUnderstanding whether we aim to *describe*, *explain*, or *predict* is central to empirical analysis. The three distinct purposes are to accurately describe empirical patterns, explain why the empirical patterns exist, predict what empirical patterns will exist.\n\n\n| Objective | Core Question | Goal | Methods |\n|---|---|---|---|\n| Describe | What is happening? | Characterize patterns & facts | Summary stats, visualizations, correlations |\n| Explain | Why is it happening? | Establish causal relationships & mechanisms | Theoretical models; experimentation; counterfactual reasoning |\n| Predict | What will happen? | Anticipate outcomes; support decisions that affect the future | Machine learning, treatment effect forecasting, policy simulations\n\n\n\n\nHere is an example for minimum wages.\n\n* Describe: Studies document that following minimum-wage increases, overall low-wage employment may look roughly stable in the short run, but disaggregated data often show larger employment declines over longer horizons, especially among youths and racial minorities.\n* Explain: Studies investigate economic mechanisms such as (i) whether lower productivity populations are more vulnerable and employers adjust along hiring margins (fewer openings, higher required skills), and (ii) whether effects are larger in sectors like retail/food service where minimum wages bite hardest.\n* Predict: A policy simulation that raises the wage floor incorporates subgroup-specific elasticities to forecast different employment losses  (e.g., unemployment for teenage or black workers and income gains for stayers)\n\n\nThe distinctions matter, as they help you recognize that predictive accuracy or good data visualization does not equal causal insight. You can then better align statistical tools with questions. Try remembering this: Describe reality, Explain causes, Predict futures\n\n\n#### **Prediction Intervals**. {-}\n\nIn addition to confidence intervals, we can also compute a *prediction interval* which estimate the variability of new data rather than a statistic\n\nIn this example, we consider a single variable and compute the frequency each value was covered.\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- runif(1000)\n# Middle 90% of values\nxq0 <- quantile(x, probs=c(.05,.95))\npaste0('we are 90% confident that the a future data point will be between ', \n    round(xq0[1],2), ' and ', round(xq0[2],2) )\n## [1] \"we are 90% confident that the a future data point will be between 0.06 and 0.95\"\n\nhist(x,\n    breaks=seq(0,1,by=.01), border=NA,\n    main='Prediction Interval', font.main=1)\nabline(v=xq0)\n```\n\n::: {.cell-output-display}\n![](02_06_MiscTopics_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\nIn this example, we consider a range for $Y_{i}$ rather than for $m(X_{i})$. These intervals also take into account the residuals, the variability of individuals rather than the variability of their mean.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bivariate Data from USArrests\nxy <- USArrests[,c('Murder','UrbanPop')]\ncolnames(xy) <- c('y','x')\nxy0 <- xy[order(xy$x),]\n```\n:::\n\n\nFor a nice overview of different types of intervals, see <https://www.jstor.org/stable/2685212>. For an in-depth view, see \"Statistical Intervals: A Guide for Practitioners and Researchers\" or \"Statistical Tolerance Regions: Theory, Applications, and Computation\". See <https://robjhyndman.com/hyndsight/intervals/> for constructing intervals for future observations in a time-series context. See Davison and Hinkley, chapters 5 and 6 (also Efron and Tibshirani, or Wehrens et al.)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# From \"Basic Regression\"\nxy0 <- xy[order(xy$x),]\nX0 <- unique(xy0$x)\nreg_lo <- loess(y~x, data=xy0, span=.8)\npreds_lo <- predict(reg_lo, newdata=data.frame(x=X0))\n\n\n# Jackknife CI\njack_lo <- sapply(1:nrow(xy), function(i){\n    xy_i <- xy[-i,]\n    reg_i <- loess(y~x, dat=xy_i, span=.8)\n    predict(reg_i, newdata=data.frame(x=X0))\n})\n\nboot_regs <- lapply(1:399, function(b){\n    b_id <- sample( nrow(xy), replace=T)\n    xy_b <- xy[b_id,]\n    reg_b <- lm(y~x, dat=xy_b)\n})\n\nplot(y~x, pch=16, col=grey(0,.5),\n    dat=xy0, ylim=c(0, 20))\nlines(X0, preds_lo,\n    col=hcl.colors(3,alpha=.75)[2],\n    type='o', pch=2)\n\n# Estimate Residuals CI at design points\nres_lo <- sapply(1:nrow(xy), function(i){\n    y_i <- xy[i,'y']\n    preds_i <- jack_lo[,i]\n    resids_i <- y_i - preds_i\n})\nres_cb <- apply(res_lo, 1, quantile,\n    probs=c(.025,.975), na.rm=T)\n\n# Plot\nlines( X0, preds_lo +res_cb[1,],\n    col=hcl.colors(3,alpha=.75)[2], lt=2)\nlines( X0, preds_lo +res_cb[2,],\n    col=hcl.colors(3,alpha=.75)[2], lty=2)\n\n\n\n# Smooth estimates \nres_lo <- lapply(1:nrow(xy), function(i){\n    y_i <- xy[i,'y']\n    x_i <- xy[i,'x']\n    preds_i <- jack_lo[,i]\n    resids_i <- y_i - preds_i\n    cbind(e=resids_i, x=x_i)\n})\nres_lo <- as.data.frame(do.call(rbind, res_lo))\n\nres_fun <- function(x0, h, res_lo){\n    # Assign equal weight to observations within h distance to x0\n    # 0 weight for all other observations\n    ki <- dunif(res_lo$x, x0-h, x0+h) \n    ei <- res_lo[ki!=0,'e']\n    res_i <- quantile(ei, probs=c(.025,.975), na.rm=T)\n}\nres_lo2 <- sapply(X0, res_fun, h=15, res_lo=res_lo)\n\nlines( X0, preds_lo + res_lo2[1,],\n    col=hcl.colors(3,alpha=.75)[2], lty=1, lwd=2)\nlines( X0, preds_lo + res_lo2[2,],\n    col=hcl.colors(3,alpha=.75)[2], lty=1, lwd=2)\n```\n\n::: {.cell-output-display}\n![](02_06_MiscTopics_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bootstrap Prediction Interval\nboot_resids <- lapply(boot_regs, function(reg_b){\n    e_b <- resid(reg_b)\n    x_b <- reg_b$model$x\n    res_b <- cbind(e_b, x_b)\n})\nboot_resids <- as.data.frame(do.call(rbind, boot_resids))\n# Homoskedastic\nehat <- quantile(boot_resids$e_b, probs=c(.025, .975))\nx <- quantile(xy$x,probs=seq(0,1,by=.1))\nboot_pi <- coef(reg)[1] + x*coef(reg)['x']\nboot_pi <- cbind(boot_pi + ehat[1], boot_pi + ehat[2])\n\n# Plot Bootstrap PI\nplot(y~x, dat=xy, pch=16, main='Prediction Intervals',\n    ylim=c(-5,20), font.main=1)\npolygon( c(x, rev(x)), c(boot_pi[,1], rev(boot_pi[,2])),\n    col=grey(0,.2), border=NA)\n\n# Parametric PI (For Comparison)\n#pi <- predict(reg, interval='prediction', newdata=data.frame(x))\n#lines( x, pi[,'lwr'], lty=2)\n#lines( x, pi[,'upr'], lty=2)\n```\n:::\n\n\n\n#### **Cross Validation**.{-}\n\nPerhaps the most common approach to selecting a bandwidth is to minimize \\textit{prediction} error. *Leave-one-out Cross-validation* minimizes the average \"leave-one-out\" mean square prediction errors:\n\\begin{eqnarray}\n\\min_{h} \\quad \\frac{1}{n} \\sum_{i=1}^{n} \\left[ \\hat{Y}_{i} - \\hat{y_{[i]}}(X,h) \\right]^2,\n\\end{eqnarray}\nwhere $\\hat{y}_{[i]}(X,h)$ is the model predicted value at $X_{i}$ based on a dataset that excludes $X_{i}$, and $h$ is the bandwidth (e.g., bin size in a regressogram). \n\nMinimizing out-sample prediction error is perhaps the simplest computational approach to choose bandwidths, and it also addresses an issue that plagues observational studies in the social sciences: your model explains everything and predicts nothing. Note, however, minimizing prediction error is not necessarily \"best\". \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crossvalidated bandwidth for regression\nxy_mat <- data.frame(y=CASchools$math, x1=CASchools$income)\nlibrary(np)\n\n## Grid Search\nBWS <- seq(1,10,length.out=20)\nBWS_CV <- sapply(BWS, function(bw){\n    E_bw <- sapply(1:nrow(xy_mat), function(i){\n        llls <- npreg(y~x1, data=xy_mat[-i,], \n            bws=bw, regtype=\"ll\",\n            ckertype='epanechnikov', bandwidth.compute=F)\n        pred_i <- predict(llls, newdata=xy_mat[i,])\n        e <-  (pred_i- xy_mat[i,'y'])\n        return(e)\n    })\n    return( mean(E_bw^2) )\n})\n\n## Plot MSE\npar(mfrow=c(1,2))\nplot(BWS, BWS_CV, ylab='CV', pch=16, \n    xlab='bandwidth (h)',)\n## Plot Resulting Predictions\nbw <- BWS[which.min(BWS_CV)]\nllls <- npreg(y~x1, data=xy_mat, \n    ckertype='epanechnikov',\n    bws=bw, regtype=\"ll\")\nplot(xy_mat$x, predict(llls), pch=16, col=grey(0,.5),\n    xlab='X', ylab='Predictions')\nabline(a=0,b=1, lty=2)\n\n## Built in algorithmic Optimziation\nllls2 <- npreg(y~x1, data=xy_mat, ckertype='epanechnikov', regtype=\"ll\")\npoints(xy_mat$x, predict(llls2), pch=2, col=rgb(1,0,0,.25))\n\n## Add legend\nadd_legend <- function(...) {\n  opar <- par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), \n              mar=c(0, 0, 0, 0), new=TRUE)\n  on.exit(par(opar))\n  plot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')\n  legend(...)\n}\nadd_legend('topright',\n    col=c(grey(0,.5),rgb(1,0,0,.25)), \n    pch=c(16,2),\n    bty='n', horiz=T,\n    legend=c('Grid Search', 'NP-algorithm'))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# CV Application\n## Smoothly Estimate X & Y Density\ny <- sort(xy_mat$y)\nfy <- npudens(y, bandwidth.compute=TRUE)\nx1 <- sort(xy_mat$x1)\nfx <- npudens(x1, bandwidth.compute=TRUE)\n## Smoothly Estimate How Y changes with X\nllls2 <- npreg(y~x1,data=xy_mat,\n    ckertype='epanechnikov',\n    regtype=\"ll\", bandwidth.compute=TRUE)\n\n\nlayout( matrix(c(2,0,1,3), ncol=2, byrow=TRUE),\n    widths=c(4/5,1/5), heights=c(1/5,4/5))\n## Joint Distribution\npar(mar=c(4,4,1,1))\nplot(y~x1, data=xy_mat,\n    pch=16, col=grey(0,.25),\n    xlab=\"District Income (1000$)\", \n    ylab=\"Test Score\")\nlines( sort(xy_mat$x), predict(llls2)[order(xy_mat$x1)],\n    pch=16, col=1)\n## Marginal Distribution\npar(mar=c(0,4,1,1))\nplot(x1, predict(fx),\n    col=grey(0,1), type='l', axes=F,\n    xlab='', ylab='')\nrug(x1, col=grey(0,.25))\npar(mar=c(4,0,1,1))\nplot(predict(fy), y,\n    col=grey(0,1), type='l', axes=F,\n    xlab='', ylab='')\nrug(y, col=grey(0,.25), side=2)\n```\n:::\n\n\n#### **Bias vs. Variance** {-}\n\n\n",
    "supporting": [
      "02_06_MiscTopics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}