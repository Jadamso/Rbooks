{
  "hash": "e935456df337f64e9bf3e4dee79ae49b",
  "result": {
    "engine": "knitr",
    "markdown": "\n# Random Variables\n***\n\nIn the last section we computed a distribution given the data, whereas now we generate data given the distribution. \n\nRandom variables are vectors that are generated from a known Cumulative Distribution Function. They are a sample from a potentially infinite population with\n\n* A *sample space* which refers to the set of all possible outcomes.\n* A *probability* for each particular set of outcomes, which is the proportion that those outcomes occur in the long run.\n\nThere are only two basic types of sample spaces: discrete (encompassing cardinal-discrete, factor-ordered, and factor-unordered data) and continuous, which lead to two types of random variables.\n\nHowever, each type of random variable has many [probability distributions](https://en.wikipedia.org/wiki/List_of_probability_distributions). The most common ones are [easily accessible](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/Distributions.html) and can be described using the cumulative distribution function\n\\begin{eqnarray}\nF(x) &=& Prob(X_{i} \\leq x).\n\\end{eqnarray}\nIn any case, probabilities must sum up to 1.\n\n## Discrete\nThe random variable can take one of several values in a set. E.g., any number in $\\{1,2,3,...\\}$ or any letter in $\\{A,B,C,...\\}$.\n\n#### **Bernoulli**. {-}\nThink of a Coin Flip: Heads=1 or Tails=0, with Probability Heads = 1/2. In general, the probability can vary.\n\\begin{eqnarray}\nX_{i} &\\in& \\{0,1\\} \\\\\nProb(X_{i} =0) &=& p \\\\\nProb(X_{i} =1) &=& 1-p.\n\\end{eqnarray}\n\nHere is an example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrbinom(1, 1, 0.5) # 1 Flip\n## [1] 0\nrbinom(4, 1, 0.5) # 4 Flips\n## [1] 1 0 0 1\nx0 <- rbinom(400, 1, 0.5)\n\n# Plot Cumulative Averages\nx0_t <- seq_len(length(x0))\nx0_mt <- cumsum(x0)/x0_t\npar(mar=c(4,4,1,4))\nplot(x0_t, x0_mt, type='l',\n    ylab='Cumulative Average',\n    xlab='Flip #', \n    ylim=c(0,1), \n    lwd=2)\n# Add individual flip outcomes\npoints(x0_t, x0, col=grey(0,.5),\n    pch='|', cex=.3)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n\n# Plot Long run proportions\nhist(x0, breaks=50,\n    xlab='Flip Outcome', ylab='Count',\n    border=NA, main=NA)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\n## plot( table(x0)/length(x0) )\n```\n:::\n\n\n\n#### **Discrete Uniform**. {-}\nDiscrete numbers with equal probability\n\\begin{eqnarray}\nX_{i} &\\in& \\{1,...N\\} \\\\\nProb(X_{i} =1) &=& Prob(X_{i} =2) = ... = 1/N.\n\\end{eqnarray}\n\nHere is an example with $N=4$. \n\nThe probability of a value smaller that $3$ is $Prob(X_{i} \\leq 3)=1/4 + 1/4 + 1/4 = 3/4$.\n\nThe probability of a value larger than $3$ is $1-Prob(X_{i} \\leq3)=1/4$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:4\nx_probs <- rep(1/4,4)\n# sample(x, 1, replace=T, prob=x_probs) # sample of 1\nX1 <- sample(x, 2000, replace=T, prob=rep(1/4,4))\nhist(X1, breaks=50, border=NA,\n    main=NA, ylab='Count')\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n\n# Add Theoretical Counts\n#points(x, x_probs*length(X1), pch='-') \n\n# Alternative Plot\nplot( ecdf(X1), pch=16, col=grey(0,.5), main=NA)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\n\n# Alternative Plot 2\n#props <- table(X1)\n#barplot(props, ylim = c(0, 0.35), ylab = \"Proportion\", xlab = \"Value\")\n#abline(h = 1/4, lty = 2)\n```\n:::\n\n\n#### **Multinoulli (aka Categorical)**. {-}\nNumbers 1,...N (or letters A,...) with unequal probabilities.\n\\begin{eqnarray}\nX_{i} &\\in& \\{1,...N\\} \\\\\nProb(X_{i} =1) &=& p_{1} \\\\\nProb(X_{i} =2) &=& p_{2} \\\\\n        &\\vdots& \\\\\np_{1} + p_{2} + ... &=& 1\n\\end{eqnarray}\n\n\nHere is an empirical example with three outcomes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:3\nx_probs <- c(3,6,1)/10\nsum(x_probs)\n## [1] 1\nX1 <- sample(x, 2000, replace=T, prob=x_probs) # sample of 2000,\nhist(X1, breaks=50, border=NA, \n    main=NA, ylab='Count')\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#points(x, x_probs*length(X1), pch=16) ## Theoretical Counts\n\nplot( ecdf(X1), pch=16, col=grey(0,.5), main=NA)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\n## Continuous\nThe random variable can take one value out of an uncountably infinite number. The probability of any individual point is zero. We describe these variables with the cumulative distribution function $F$, or the probability density function $f$.\n\n#### **Continuous Uniform**. {-}\nAny number on a unit interval allowing for any number of decimal points, with every number having the same probability.\n\\begin{eqnarray}\nX_{i} &\\in& [0,1] \\\\\nF(x) &=& \\begin{cases} \n0 & x < 0 \\\\\nx & x \\in [0,1] \\\\\n1 & x > 1\n\\end{cases}\\\\\nf(x) &=& \\begin{cases}\n1 & x \\in [0,1] \\\\\n0 & \\text{Otherwise}. \n\\end{cases}\n\\end{eqnarray}\n\nThe probability of a value smaller that $0.25$ is $F(0.25)=0.25$.\n\nThe probability of a value larger than $0.25$ is $1-F(0.25)=0.75$.\n\nThe probability of a value being exactly $0.25$ is $Prob(X_{i} =0.25)=0$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrunif(3) # 3 draws\n## [1] 0.4287399 0.1328520 0.2576814\nX2 <- runif(2000)\nhist(X2, breaks=20, border=NA, main=NA, freq=F)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n#### **Beta**. {-}\nAny number on the unit interval, $X_{i} \\in [0,1]$, but with *unequal* probabilities. \n\n::: {.cell}\n\n```{.r .cell-code}\nX3 <- rbeta(2000,2,2) ## two shape parameters\nhist(X3, breaks=20, border=NA, main=NA, freq=F)\n\n#See the underlying probabilities\n#f_25 <- dbeta(.25, 2, 2)\n\nx <- seq(0,1,by=.01)\nfx <- dbeta(x, 2, 2)\nlines(x, fx)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nAlso see that the [Beta](https://en.wikipedia.org/wiki/Beta_distribution) distribution can take many different shapes.\n\n::: {.cell}\n\n```{.r .cell-code}\nop <- par(no.readonly = TRUE); on.exit(par(op), add = TRUE)\nx <- seq(0,1,by=.01)\npars <- expand.grid( c(.5,1,2), c(.5,1,2) )\npar(mfrow=c(3,3))\napply(pars, 1, function(p){\n    fx <- dbeta( x,p[1], p[2])\n    plot(x, fx, type='l', xlim=c(0,1), ylim=c(0,4), lwd=2)\n    #hist(rbeta(2000, p[1], p[2]), breaks=50, border=NA, main=NA, freq=F)\n})\ntitle('Beta densities', outer=T, line=-1)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\n\n#### **Normal (Gaussian)**. {-}\nAny number between $(\\infty,\\infty)$, with bell shaped probabilities. \nThe distribution is mathematically complex, and not written here, but we will encounter it again and again.\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(3) # 3 draws\n## [1] -0.9911485  0.4247721 -0.5326790\n\nX4 <- rnorm(2000)\nhist(X4, breaks=20,\n    border=NA, main=NA,\n    freq=F, ylim=c(0,.4), xlim=c(-4,4))\n\nx <- seq(-10,10,by=.025)\nfx <- dnorm(x)\nlines(x, fx)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nWe might further distinguish types of random variables based on whether their maximum value is theoretically finite or infinite. We will return to the theory behind probability distributions in a later chapter. \n\n\n\n## Drawing Samples\n\nThere are several ways to computationally generate random variables from a probability distribution. Perhaps the most common one is ``inverse sampling''. \n\nRandom variables have an associated *quantile function*, which is the inverse of the CDF: the $x$ value where $p$ percent of the data fall below it.\n\\begin{eqnarray}\nQ(p) = F^{-1}(p), \\quad p\\in [0,1]\n\\end{eqnarray}\n(Recall that the median is the value $x$ where $50\\%$ of the data fall below $x$, for example.) \nTo generate a random variable, first sample $p$ from a uniform distribution and then find the associated quantile.\n\n#### **Using Math**. {-}\nIf you know the distribution function, then you can derive the quantile function and do inverse sampling. Here is an in-depth example of the [Dagum distribution](https://en.wikipedia.org/wiki/Dagum_distribution). The distribution function is $F(x)=(1+(x/b)^{-a})^{-c}$. For a given $p=F(x)$, we can then solve for the quantile $Q(p)=\\frac{ b p^{\\frac{1}{ac}} }{(1-p^{1/c})^{1/a}}$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Theoretical Quantile Function (from VGAM::qdagum)\nqdagum <- function(p, scale.b=1, shape1.a, shape2.c) {\n  # Quantile function (theoretically derived from the CDF)\n  ans <- scale.b * (expm1(-log(p) / shape2.c))^(-1 / shape1.a)\n  # Special known cases\n  ans[p == 0] <- 0\n  ans[p == 1] <- Inf\n  # Safety Checks\n  ans[p < 0] <- NaN\n  ans[p > 1] <- NaN\n  if(scale.b <= 0 | shape1.a <= 0 | shape2.c <= 0){ ans <- ans*NaN }\n  # Return\n  return(ans)\n}\n\n# Generate Random Variables (VGAM::rdagum)\nrdagum <-function(n, scale.b=1, shape1.a, shape2.c){\n    p <- runif(n) # generate random probabilities\n    x <- qdagum(p, scale.b=scale.b, shape1.a=shape1.a, shape2.c=shape2.c) #find the inverses\n    return(x)\n}\n\n# Example\nset.seed(123)\nX <- rdagum(3000,1,3,1)\nX[1:5]\n## [1] 0.7390476 1.5499868 0.8845006 1.9616251 2.5091656\n```\n:::\n\n\n#### **Using Data**. {-}\n\nTo generate a random variable from known distributions, you can also use some type of physical machine. E.g., \nyou can roll a fair die to generate Discrete Uniform data or you can roll weighted die to generate Categorical data. However, you can also generate a random variable from a known empirical distribution.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Empirical Distribution\nX <- USArrests$Murder\nFX_hat <- ecdf(X)\nplot(FX_hat, lwd=2, xlim=c(0,20),\n    pch=16, col=grey(0,.5), main='')\n\n# Two Examples of generating a random variable\np <- c(.25, .9) # pretended to be random\ncols <- c(2,4)\nQX_hat <- quantile(X, p, type=1)\nsegments(QX_hat, p, -10, p, col=cols)\nsegments(QX_hat, p, QX_hat, 0, col=cols)\nmtext( round(QX_hat,2), 1, at=QX_hat, col=cols)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\n\n# Multiple Draws\np <- runif(3000)\nQX_hat <- quantile(x, p,type=1)\nQX_hat[1:5]\n## 20.58269202% 94.25390474% 37.93237919% 62.62401412% 18.35024019% \n##       -5.900        8.850       -2.425        2.525       -6.350\n```\n:::\n\n",
    "supporting": [
      "01_04_RandomVariables_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}