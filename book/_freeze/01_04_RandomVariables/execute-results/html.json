{
  "hash": "ac704c73fbd245cfce22bdf297f29c48",
  "result": {
    "engine": "knitr",
    "markdown": "\n# Random Variables\n***\n\nIn the last section we computed a distribution given the data, whereas now we generate data given the distribution.\n\nRandom variables are vectors that are generated from a known Cumulative Distribution Function. They are a sample from a potentially infinite population with\n\n* A *sample space* which refers to the set of all possible outcomes.\n* A *probability* for each particular set of outcomes, which is the proportion that those outcomes occur in the long run.\n\n\nThere are many [probability distributions](https://en.wikipedia.org/wiki/List_of_probability_distributions), and the most common ones are [easily accessible](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/Distributions.html). But there are only two basic types of sample spaces: discrete (encompassing cardinal-discrete, factor-ordered, and factor-unordered data) and continuous, which lead to two types of random variables.\n\n\n## Discrete\nThe random variable can take one of several values in a set. E.g., any number in $\\{1,2,3,...\\}$ or any letter in $\\{A,B,C,...\\}$.\n\n#### **Bernoulli**. {-}\nThink of a Coin Flip: Heads=1 or Tails=0, with Prob. Heads = 1/2. In general, the probability can vary.\n\n\\begin{eqnarray}\nX &\\in& \\{0,1\\} \\\\\nProb(X=0) &=& p \\\\\nProb(X=1) &=& 1-p.\n\\end{eqnarray}\n\nHere is an example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrbinom(1, 1, 0.5) # 1 Flip\n## [1] 0\nrbinom(4, 1, 0.5) # 4 Flips\n## [1] 1 0 0 0\nx0 <- rbinom(600, 1, 0.5)\n\n# Setup Plot\nlayout(matrix(c(1, 2), nrow = 1), widths = c(4, 1))\n\n# Plot Cumulative Averages\nx0_t <- seq_len(length(x0))\nx0_mt <- cumsum(x0)/x0_t\npar(mar=c(4,4,1,4))\nplot(x0_t, x0_mt, type='l',\n    ylab='Cumulative Average',\n    xlab='Flip #', \n    ylim=c(0,1), \n    lwd=2)\npoints(x0_t, x0, col=grey(0,.5),\n    pch=16, cex=.2)\n\n# Plot Long run proportions\npar(mar=c(4,4,1,1))\nx_hist <- hist(x0, breaks=50, plot=F)\nbarplot(x_hist$count, axes=FALSE,\n    space=0, horiz=TRUE, border=NA)\naxis(1)\naxis(2)\nmtext('Overall Count', 2, line=2.5)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n#### **Discrete Uniform**. {-}\nNumbers with equal probability\n\\begin{eqnarray}\nX &\\in& \\{1,...N\\} \\\\\nProb(X=1) &=& Prob(X=2) = ... = Prob(X=N) = 1/N.\n\\end{eqnarray}\n\nHere is an example with  $N=4$. \n\nThe probability of a value smaller that $3$ is $P(X\\leq 3)=1/4 + 1/4 + 1/4 = 3/4$.\n\nThe probability of a value larger than $3$ is $1-P(X<3)=1/4$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sample(1:4, 1, replace=T, prob=rep(1/4,4) ) # sample of 1\nx1 <- sample(1:4, 2000, replace=T, prob=rep(1/4,4))\nhist(x1, breaks=50, border=NA, main=NA, freq=T)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n\n# Alternative Plot\n#props <- table(x1)\n#barplot(props, ylim = c(0, 0.35), ylab = \"Proportion\", xlab = \"Value\")\n#abline(h = 1/4, lty = 2)\n```\n:::\n\n\n#### **Multinoulli (aka Categorical)**. {-}\nNumbers 1,...4 (or letters A,..D) with unequal probabilities.\n\nHere is an example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx1 <- sample(1:4, 2000, replace=T, prob=c(3,4,1,2)/10) # sample of 2000,\nhist(x1, breaks=50, border=NA, main=NA, freq=T)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Continuous\nThe random variable can take one value out of an uncountably infinite number. The probability of any individual point is zero.\n\n\n#### **Continuous Uniform**. {-}\nAny number between $[0,1]$, allowing for any number of decimal points, with every number having the same probability.\n\n\\begin{eqnarray}\nF(x) &=& Prob(X \\leq x) = \\begin{cases} \n0 & x < 0 \\\\\nx & x \\in [0,1] \\\\\n1 & x > 1.\n\\end{cases}\n\\end{eqnarray}\n\nThe probability of a value smaller that $0.25$ is $F(0.25)=0.25$.\n\nThe probability of a value larger than $0.25$ is $1-F(0.25)=0.75$.\n\nThe probability of a value being exactly $0.25$ is $Prob(X=0.25)=0$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrunif(3) # 3 draws\n## [1] 0.4245273 0.2021654 0.1395608\nx2 <- runif(2000)\nhist(x2, breaks=20, border=NA, main=NA, freq=F)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n#### **Beta**. {-}\nAny number between $[0,1]$ with unequal probabilities. \n\n::: {.cell}\n\n```{.r .cell-code}\nx3 <- rbeta(2000,2,2) ## two shape parameters\nhist(x3, breaks=20, border=NA, main=NA, freq=F)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nSee the underlying probabilities\n\n::: {.cell}\n\n```{.r .cell-code}\nf_25 <- dbeta(.25, 2, 2)\n\nx <- seq(0,1,by=.1)\nfx <- dbeta(x, 2, 2)\nrbind(x, fx)\n##    [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]\n## x     0 0.10 0.20 0.30 0.40  0.5 0.60 0.70 0.80  0.90     1\n## fx    0 0.54 0.96 1.26 1.44  1.5 1.44 1.26 0.96  0.54     0\n```\n:::\n\n\nAlso see that the [Beta](https://en.wikipedia.org/wiki/Beta_distribution) distribution can take many different shapes.\n\n::: {.cell}\n\n```{.r .cell-code}\nop <- par(no.readonly = TRUE); on.exit(par(op), add = TRUE)\nx <- seq(0,1,by=.01)\npars <- expand.grid( c(.5,1,2), c(.5,1,2) )\npar(mfrow=c(3,3))\napply(pars, 1, function(p){\n    fx <- dbeta( x,p[1], p[2])\n    plot(x, fx, type='l', xlim=c(0,1), ylim=c(0,4), lwd=2)\n    #hist(rbeta(2000, p[1], p[2]), breaks=50, border=NA, main=NA, freq=F)\n})\ntitle('Beta densities', outer=T, line=-1)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-7-1.png){width=768}\n:::\n:::\n\n\n\n#### **Normal (Gaussian)**. {-}\nAny number between $(\\infty,\\infty)$, with a bell shaped probabilities. \nThe distribution is complex, and not written here, but we will encounter it again and again.\n\n::: {.cell}\n\n```{.r .cell-code}\nrnorm(3) # 3 draws\n## [1] -2.41696607  0.02585512  0.77926644\n\nx3 <- rnorm(2000) \nhist(x3, breaks=20, border=NA, main=NA, freq=F)\n\nx <- seq(-10,10,by=.025)\nfx <- dnorm(x)\nlines(x, fx)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nWe might further distinguish types of random variables based on whether their maximum value is theoretically finite or infinite. We will return to the theory behind probability distributions in a later chapter. \n\n\n\n## Drawing Samples\n\n#### **Using Computers**. {-}\nThere are several ways to computationally generate random variables from a probability distribution. Perhaps the most common one is ``inverse sampling'' for continuous random variables. \n\nContinuous random variables have an associated quantile function: $Q_{X}(p)$, which is the inverse of the CDF: the $x$ value where $p$ percent of the data fall below it. (Recall that the median is the value $x$ where $50\\%$ of the data fall below $x$, for example.) To generate a random variable, first sample $p$ from a uniform distribution and then find the associated quantile.\n\nHere is an in-depth example of drawing random variables from the [Dagum distribution](https://en.wikipedia.org/wiki/Dagum_distribution)\n\n::: {.cell}\n\n```{.r .cell-code}\n# Quantile Function (VGAM::qdagum)\nqdagum <- function(p, scale=1, shape1.a, shape2.p) {\n  # Quantile function (theoretically derived from the CDF)\n  ans <- scale * (expm1(-log(p) / shape2.p))^(-1 / shape1.a)\n  # Special known cases\n  ans[p == 0] <- 0\n  ans[p == 1] <- Inf\n  # Checks\n  ans[p < 0] <- NaN\n  ans[p > 1] <- NaN\n  if(scale <= 0 | shape1.a <= 0 | shape2.p <= 0){ ans <- ans*NaN }\n  # Return\n  return(ans)\n}\n\n# Generate Random Variables (VGAM::rdagum)\nrdagum <-function(n, scale=1, shape1.a, shape2.p){\n    p <- runif(n) # generate random quantile probabilities\n    x <- qdagum(p, scale=scale, shape1.a=shape1.a, shape2.p=shape2.p) #find the inverses\n    return(x)\n}\n\n# Example\nset.seed(123)\nx <- rdagum(3000,1,3,1)\n\n# Empirical Distribution\nFx_hat <- ecdf(x)\nplot(Fx_hat, lwd=2, xlim=c(0,5), main='')\n\n# Two Examples of generating a random variable\np <- c(.25, .9)\ncols <- c(2,4)\nQx_hat <- quantile(x, p)\nsegments(Qx_hat,p,-10,p, col=cols)\nsegments(Qx_hat,p,Qx_hat,0, col=cols)\nmtext( round(Qx_hat,2), 1, at=Qx_hat, col=cols)\n```\n\n::: {.cell-output-display}\n![](01_04_RandomVariables_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n#### **In the Real World**. {-}\n",
    "supporting": [
      "01_04_RandomVariables_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}