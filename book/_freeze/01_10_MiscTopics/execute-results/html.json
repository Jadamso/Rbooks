{
  "hash": "119c9391be8644f73d234ea5352bf750",
  "result": {
    "engine": "knitr",
    "markdown": "# Misc Topics\n\n## Transformations\n\nTransformations can stabilize variance, reduce skewness, and make model errors closer to Gaussian.\n\nPerhaps the most common examples are *power transformations*: $y= x^\\lambda$, which includes $\\sqrt{x}$ and $x^2$.\n\nOther examples include the *exponential transformation*: $y=exp(x)$ for any $x\\in (-\\infty, \\infty)$ and *logarithmic transformation*: $y=\\log x$ for any $x>0$.\n\nThe *Box–Cox Transform* nests many cases. For $x>0$ and parameter $\\lambda$,\n\\begin{eqnarray}\ny=\\begin{cases}\n\\dfrac{x^\\lambda-1}{\\lambda}, & \\lambda\\neq 0,\\\\\n\\log x, & \\lambda=0.\n\\end{cases}\n\\end{eqnarray}\nThis function is continuous over $\\lambda$.\n\n\n```r\n# Box–Cox transform and inverse\nbc_transform <- function(x, lambda) {\n  if (any(x <= 0)) stop(\"Box-Cox requires x > 0\")\n  if (abs(lambda) < 1e-8) log(x) else (x^lambda - 1)/lambda\n}\nbc_inverse <- function(t, lambda) {\n  if (abs(lambda) < 1e-8) exp(t) else (lambda*t + 1)^(1/lambda)\n}\n\n\nX <- USArrests$Murder\nhist(X)\n\npar(mfrow=c(1,3))\nfor(lambda in c(-1,0,1)){\n    Y <- bc_transform(X, lambda)\n    hist(Y, main=paste0('Lambda=', lambda))\n}\n```\n\n#### **Law of the Unconscious Statistician (LOTUS)**. {-}\n\nIf $X_{i}$ is discrete data and $g$ is a function, then\n$\\mathbb E[g(X)] = \\sum_x g(x)Prob(X_{i}=x)$.\n\n\nLet $X_{i}$ take values $\\{1,2,3\\}$ with\n$$\nPr(X_{i}=1)=0.2,\\quad Prob(X_{i}=2)=0.5,\\quad Prob(X_{i}=3)=0.3.\n$$\nLet $g(x)=x^2+1$. By LOTUS,\n$$\n\\mathbb E[g(X_{i})]=\\sum_x g(x)Prob(X_{i}=x)\n= g(1)\\cdot0.2 + g(2)\\cdot0.5 + g(3)\\cdot0.3.\n$$\n\nCompute:\n- $g(1)=1^2+1=2$\n- $g(2)=2^2+1=5$\n- $g(3)=3^2+1=10$\n\nSo\n$$\n\\mathbb E[g(X_{i})] = 2(0.2) + 5(0.5) + 10(0.3)\n= 0.4 + 2.5 + 3 = 5.9.\n$$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx  <- c(1,2,3)\npx <- c(0.2,0.5,0.3)\ng  <- function(x) x^2 + 1\nsum(g(x) * px) \n## [1] 5.9\n```\n:::\n\n\nIf $X_{i}$ is continuous data and $g$ is a function, then\n$\\mathbb E[g(X_{i})] = \\int_{-\\infty}^{\\infty} g(x)f(x) dx$.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nx <- rexp(5e5, rate = 1)           # X ~ Exp(1)\nmean(sqrt(x))                      # LOTUS Simulation\n## [1] 0.8863084\nsqrt(pi) / 2                       # Exact via LOTUS integral\n## [1] 0.8862269\n```\n:::\n\n\n\n#### **Jensen’s inequality**. {-}\n\nConcave functions curve inwards, like the inside of a cave.\nConvex functions curve outward, the opposite of concave.\n\nIf $g$ is *concave*, then $g(\\mathbb E[X_{i}]) \\geq \\mathbb E[g(X_{i})]$.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Continuous Example 1\nmean( sqrt(x) )\n## [1] 0.8863084\nsqrt( mean(x) ) \n## [1] 1.000095\n\n# Continuous Example 2\nmean( log(x) )\n## [1] -0.5775497\nlog( mean(x) ) \n## [1] 0.0001900092\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Discrete Example\nx  <- c(1,2,3)\npx <- c(0.2,0.5,0.3)\nEX <- sum(x * px)\nEX\n## [1] 2.1\n\ng  <- sqrt\ngEX <- g(EX)\nEgX <- sum(g(x) * px)\nc(gEX, EgX)\n## [1] 1.449138 1.426722\n```\n:::\n\n\nIf $g$ is *convex*, then the inequality reverses: $g(\\mathbb E[X_{i}]) \\leq \\mathbb E[g(X_{i})]$.\n\n::: {.cell}\n\n```{.r .cell-code}\nmean( exp(x) )\n## [1] 10.06429\nexp( mean(x) )  \n## [1] 7.389056\n```\n:::\n\n\n## Drawing Samples\n\nTo generate a random variable from known distributions, you can use some type of physical machine. E.g., you can roll a fair die to generate Discrete Uniform data or you can roll weighted die to generate Categorical data.\n\nThere are also several ways to computationally generate random variables from a probability distribution. Perhaps the most common one is \"inverse sampling\", which uses the quantile function\n\\begin{eqnarray}\n\\widehat{Q}(p) = \\widehat{F}^{-1}(p), \\quad p\\in [0,1]\n\\end{eqnarray}\n\n\nTo generate a random variable using inverse sampling, first sample $p$ from a uniform distribution and then find the associated quantile.^[Drawing random uniform samples with computers is actually quite complex and beyond the scope of this course.]\n\n\n#### **Using Data**. {-}\n\nYou can generate a random variable from a known empirical distribution. Inverse sampling randomly selects observations from the dataset with equal probabilities. To implement this, we \n\n* order the data and associate each observation with an ECDF value\n* draw $p \\in [0,1]$ as a uniform random variable\n* find the associated data point on the ECDF\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Empirical Distribution\nX <- USArrests$Murder\nFX_hat <- ecdf(X)\nplot(FX_hat, lwd=2, xlim=c(0,20),\n    pch=16, col=grey(0,.5), main='')\n```\n\n::: {.cell-output-display}\n![](01_10_MiscTopics_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n\n# Generating a random variable\np <- runif(3000) ## Multiple Draws\nQX_hat <- quantile(X, p, type=1)\nQX_hat[1:5]\n## 26.041532471% 71.333139879% 53.790551913%  3.479892248% 36.169388471% \n##           4.3          10.4           7.4           2.1           5.9\n```\n:::\n\n\n#### **Using Math**. {-}\n\nIf you know the distribution function that generates the data, then you can derive the quantile function and do inverse sampling. Here is an in-depth example of the [Dagum distribution](https://en.wikipedia.org/wiki/Dagum_distribution). The distribution function is $F(x)=(1+(x/b)^{-a})^{-c}$. For a given $p=F(x)$, we can then solve for the quantile $Q(p)=\\frac{ b p^{\\frac{1}{ac}} }{(1-p^{1/c})^{1/a}}$. Afterwhich, we sample $p$ from a uniform distribution and then find the associated quantile.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Theoretical Quantile Function (from VGAM::qdagum)\nqdagum <- function(p, scale.b=1, shape1.a, shape2.c) {\n  # Quantile function (theoretically derived from the CDF)\n  ans <- scale.b * (expm1(-log(p) / shape2.c))^(-1 / shape1.a)\n  # Special known cases\n  ans[p == 0] <- 0\n  ans[p == 1] <- Inf\n  # Safety Checks\n  ans[p < 0] <- NaN\n  ans[p > 1] <- NaN\n  if(scale.b <= 0 | shape1.a <= 0 | shape2.c <= 0){ ans <- ans*NaN }\n  # Return\n  return(ans)\n}\n\n# Generate Random Variables (VGAM::rdagum)\nrdagum <-function(n, scale.b=1, shape1.a, shape2.c){\n    p <- runif(n) # generate random probabilities\n    x <- qdagum(p, scale.b=scale.b, shape1.a=shape1.a, shape2.c=shape2.c) #find the inverses\n    return(x)\n}\n\n# Example\nset.seed(123)\nX <- rdagum(3000,1,3,1)\nX[1:5]\n## [1] 0.7390476 1.5499868 0.8845006 1.9616251 2.5091656\n```\n:::\n\n\n",
    "supporting": [
      "01_10_MiscTopics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}